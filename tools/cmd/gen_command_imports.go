package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"html/template"
	"os"
	"path/filepath"
	"strings"
)

var registerCommandTemplate = template.Must(template.New("register_commands").Parse(`// Code generated by hanamaru generator; DO NOT EDIT.
package main

import(
	{{range .}}"hanamaru/commands/{{.Pkg}}"
	{{end}}
)

func init() {
	{{range .}}hanamaru.AddCommand({{.Pkg}}.{{.Name}})
	{{end}}
}
`))

type CommandDef struct {
	Pkg  string
	Name string
}

func main() {
	var commands []CommandDef
	filepath.Walk("./commands", func(path string, info os.FileInfo, err error) error {
		var fset token.FileSet
		file, _ := parser.ParseFile(&fset, path, nil, parser.ParseComments)
		if file != nil {
			ast.Inspect(file, func(node ast.Node) bool {
				//fmt.Println(node)
				d, ok := node.(*ast.ValueSpec)
				if ok {
					if len(d.Values) > 0 {
						ur, ok := d.Values[0].(*ast.UnaryExpr)
						if ok {
							x, ok := ur.X.(*ast.CompositeLit)
							if ok {
								if strings.Contains(fmt.Sprintf("%v", x.Type), "Command") {
									commands = append(commands, CommandDef{file.Name.String(), d.Names[0].String()})
								}
							}
						}
					}
				}
				return true
			})
		}
		return nil
	})
	f, _ := os.OpenFile("./commands.go", os.O_CREATE, 775)
	defer f.Close()
	f.Truncate(0)
	registerCommandTemplate.Execute(f, commands)
}
